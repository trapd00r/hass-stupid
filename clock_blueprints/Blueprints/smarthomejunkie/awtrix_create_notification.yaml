blueprint:
  name: Awtrix Create Notification
  description: Show a notification on the Ulanzi Clock
  domain: automation
  author: Smart Home Junkie
  input:
    awtrix_display:
      name: Awtrix Display
      description: Select the target Awtrix display.
      selector:
        device:
          model: "AWTRIX Light"
    toggle_helper:
      name: Toggle Helper
      description: Select the Toggle Helper that will toggle the notification on or off.
      selector:
        entity:
          domain: input_boolean
    notification_text:
      name: Notification Text
      description: Enter the notification text.
      default: ""
    my_icon:
      name: Icon
      description: Enter the Icon Name or ID of the icon that you like to show.
      default: ""
    push_icon:
      name: Push Icon
      description: Icon behavior
      selector:
        select:
          options:
            - label: "Icon doesn't move"
              value: "0"
            - label: "Icon moves with text and will not appear again"
              value: "1"
            - label: "Icon moves with text but appears again when the text starts"
              value: "2"
          mode: dropdown
      default: "2"
    text_case:
      name: Text Case
      description: Select how you would like your text to display.
      selector:
        select:
          options:
            - label: "Use global setting"
              value: "0"
            - label: "Force Uppercase"
              value: "1"
            - label: "Show as you entered it"
              value: "2"
          mode: dropdown
      default: "0"
    background_color:
      name: Background Color
      description: Select the Background color
      selector:
        color_rgb:
      default: [0, 0, 0]
    text_color:
      name: Text Color
      description: Select the Text color
      selector:
        color_rgb:
      default: [255, 255, 255]
    show_rainbow:
      name: Rainbow Colors
      description: Should the notification be shown in Rainbow colors?
      selector:
        boolean:
      default: false
    hold_notification:
      name: Hold Notification
      description: Should the notification stay on the display until it's manually dismissed? (Overrides Duration)
      selector:
        boolean:
      default: true
    duration:
      name: Duration (in seconds)
      description: Sets how long the app should be displayed. 0 is global app time.
      default: "0"

trigger:
  - platform: state
    entity_id: !input toggle_helper
    to: "on"
    id: "On"
  - platform: state
    entity_id: !input toggle_helper
    to: "off"
    id: "Off"

variables:
  device_id: !input awtrix_display
  my_display: >
    {{ iif( device_attr(device_id, 'name_by_user') != none, device_attr(device_id, 'name_by_user'), device_attr(device_id, 'name') ) }}
  my_toggle_helper: toggle_helper
  notification_text: !input notification_text
  hold_notification: !input hold_notification
  show_rainbow: !input show_rainbow
  push_icon: !input push_icon
  my_icon: !input my_icon
  background_color: !input background_color
  text_color: !input text_color
  text_case: !input text_case
  my_duration: !input duration

action:
  - if:
      - condition: trigger
        id: "On"
    then:
      - service: mqtt.publish
        data:
          qos: 0
          retain: false
          topic: "{{my_display}}/notify"
          payload: |-
            {   
              "text": "{{ notification_text }}",
              "icon": "{{ my_icon }}",
              "background": {{ background_color }},
              "color": {{ text_color }},
              "textCase": "{{ text_case }}",
              "pushIcon": "{{ push_icon }}",
              "rainbow": {{ iif(show_rainbow, "true", "false") }},              
              "hold": {{ iif(hold_notification, "true", "false") }},
              "duration": "{{ my_duration }}"
            }
    else:
      - device_id: "{{device_id}}"
        domain: button
        entity_id: button.dismiss_notification
        type: press
